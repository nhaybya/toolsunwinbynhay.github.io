// JavaScript Code

let password = "Nhayy";
let attemptCount = 0;
let capital = 0;
let currentGame = "Sun.win ü§ñ"; // Only one game available

// Init main function
document.addEventListener('DOMContentLoaded', () => {
  promptPassword();
});

// Function to prompt for password
async function promptPassword() {
  const { value: enteredPassword, isConfirmed } = await Swal.fire({
    title: 'üîí Enter Password',
    input: 'password',
    inputLabel: 'Password',
    inputPlaceholder: 'üîë',
    showCancelButton: true,
    confirmButtonText: 'X√°c Nh·∫≠n',
    cancelButtonText: 'Tho√°t',
    inputAttributes: {
      autocapitalize: 'off',
      autocorrect: 'off'
    }
  });

  if (isConfirmed) {
    if (enteredPassword === password) {
      await showWelcomeMessage();
      await askForCapital();
    } else {
      attemptCount++;
      if (attemptCount >= 2) {
        await showContactOption();
      } else {
        await showPasswordError();
      }
    }
  } else {
    Swal.fire('Tho√°t ·ª©ng d·ª•ng.', '', 'info');
  }
}

// Function to show welcome message
async function showWelcomeMessage() {
  await Swal.fire({
    title: 'Tool By Nhayy',
    text: 'Xin ch√†o b·∫°n! H√¥m nay Nhayy s·∫Ω gi√∫p b·∫°n v·ªÅ b·ªù nh√© ü§ù!',
    icon: 'success',
    confirmButtonText: 'T√¥i K√¨ V·ªçng V√†o B·∫°n ??'
  });
}

// Function to ask for capital
async function askForCapital() {
  const { value: inputCapital, isConfirmed } = await Swal.fire({
    title: 'Nh·∫≠p s·ªë ti·ªÅn v·ªën',
    input: 'text',
    inputLabel: 'Vd : 500k',
    inputPlaceholder: 'Vd : 500k',
    showCancelButton: true,
    confirmButtonText: 'X√°c Nh·∫≠n',
    cancelButtonText: 'Tho√°t',
    inputValidator: (value) => {
      if (!value) {
        return 'B·∫°n c·∫ßn nh·∫≠p s·ªë ti·ªÅn!';
      }
      const num = parseFloat(value.replace(/[^0-9]/g, ''));
      if (isNaN(num) || num <= 0) {
        return 'S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!';
      }
      return null;
    }
  });

  if (isConfirmed) {
    const input = inputCapital.replace(/[^0-9]/g, '');
    capital = parseFloat(input);
    await mainMenu();
  } else {
    Swal.fire('Tho√°t ·ª©ng d·ª•ng.', '', 'info');
  }
}

// Function to show password error
async function showPasswordError() {
  const { isConfirmed } = await Swal.fire({
    title: 'üîí',
    text: 'KEY kh√¥ng ch√≠nh x√°c!',
    icon: 'error',
    showCancelButton: true,
    confirmButtonText: 'Nh·∫≠p L·∫°i',
    cancelButtonText: 'Tho√°t'
  });

  if (isConfirmed) {
    await promptPassword();
  } else {
    Swal.fire('Tho√°t ·ª©ng d·ª•ng.', '', 'info');
  }
}

// Function to show contact option after multiple failed attempts
async function showContactOption() {
  const { isConfirmed } = await Swal.fire({
    title: 'B·∫°n ƒë√£ nh·∫≠p sai m·∫≠t kh·∫©u qu√° 2 l·∫ßn!',
    text: 'Vui l√≤ng li√™n h·ªá ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.',
    icon: 'warning',
    showCancelButton: true,
    confirmButtonText: 'Li√™n h·ªá',
    cancelButtonText: 'Th·ª≠ l·∫°i'
  });

  if (isConfirmed) {
    window.open("https://facebook.com/Nhayydzvcl", "_blank");
  } else {
    await promptPassword();
  }
}

// Function to show main menu
async function mainMenu() {
  const { isConfirmed } = await Swal.fire({
    title: 'üîÆ Ch·ªçn tr√≤ ch∆°i',
    text: 'Nhayy S·∫Ω K√©o B·∫°n Ch·ª© Aii',
    icon: 'question',
    showCancelButton: true,
    confirmButtonText: 'Sun.win',
    cancelButtonText: 'Tho√°t'
  });

  if (isConfirmed) {
    await getDiceResult(currentGame);
  } else {
    Swal.fire('ƒê√£ h·ªßy.', '', 'info');
  }
}

// Function to get random bet based on capital
function getRandomBet() {
  const maxBet = Math.floor(capital * 0.5); // 50% v·ªën
  const minBet = 5; // Minimum bet

  if (maxBet < minBet) return null; // Not enough capital to bet

  // Random bet between minBet and maxBet
  const betAmount = Math.floor(Math.random() * (maxBet - minBet + 1)) + minBet;

  return betAmount;
}

// Function to get dice result
async function getDiceResult(gameName) {
  const { value: diceInput, isConfirmed } = await Swal.fire({
    title: 'üé≤ Nh·∫≠p k·∫øt qu·∫£ 3 x√∫c s·∫Øc',
    text: "Vui l√≤ng nh·∫≠p 3 s·ªë t·ª´ 1 ƒë·∫øn 6, c√°ch nhau b·∫±ng d·∫•u '-'. Vd: 5-6-1",
    input: 'text',
    inputPlaceholder: '5-6-1',
    showCancelButton: true,
    confirmButtonText: 'X√°c Nh·∫≠n',
    cancelButtonText: 'Tho√°t',
    inputValidator: (value) => {
      if (!value) {
        return 'Vui l√≤ng nh·∫≠p k·∫øt qu·∫£!';
      }
      const numbers = value.split('-').map(num => parseInt(num.trim(), 10));
      if (
        numbers.length !== 3 ||
        numbers.some(isNaN) ||
        numbers.some(n => n < 1 || n > 6)
      ) {
        return 'Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng 3 s·ªë t·ª´ 1 ƒë·∫øn 6, c√°ch nhau b·∫±ng d·∫•u \'-\'.';
      }
      return null;
    }
  });

  if (isConfirmed) {
    const input = diceInput;
    const numbers = input.split('-').map(num => parseInt(num.trim(), 10));

    const [num1, num2, num3] = numbers;

    const sum = num2 * num3 / num1;
    const average = sum * 2;

    const isEven = (sum % 2 === 0);
    let resultType = isEven ? "X·ªâu" : "T√†i";

    if (numbers.includes(1)) {
      resultType = "X·ªâu";
    }

    const percentage = Math.floor(Math.random() * 11) + 90; // 90-100%

    const betAmount = getRandomBet();
    if (betAmount === null) {
      await Swal.fire({
        title: "Kh√¥ng ƒë·ªß v·ªën ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c.",
        text: `V·ªën c·ªßa b·∫°n l√† ${formatCurrency(capital)}, kh√¥ng th·ªÉ ƒë·∫∑t c∆∞·ª£c.`,
        icon: 'error',
        confirmButtonText: 'OK'
      });
      return;
    }

    const initialResult = {
      type: resultType,
      percentage: percentage,
      betAmount: betAmount
    };

    await processAdditionalSteps(gameName, initialResult);
  } else {
    Swal.fire('Tho√°t ·ª©ng d·ª•ng.', '', 'info');
  }
}

// Function to process additional steps
async function processAdditionalSteps(gameName, initialResult) {
  // Step 1: Choose side with fewer bets
  const { isConfirmed: lowBetsConfirmed } = await Swal.fire({
    title: 'B√™n n√†o l√† b√™n √≠t ng∆∞·ªùi ƒë·∫∑t c∆∞·ª£c?',
    icon: 'question',
    showCancelButton: true,
    confirmButtonText: 'T√†i',
    cancelButtonText: 'X·ªâu'
  });

  const lowBets = lowBetsConfirmed ? "t√†i" : "x·ªâu";

  // Step 2: Choose side with less money being pumped
  const { isConfirmed: lowMoneyConfirmed } = await Swal.fire({
    title: 'B√™n n√†o l√† b√™n √≠t ti·ªÅn ƒëang b∆°m?',
    icon: 'question',
    showCancelButton: true,
    confirmButtonText: 't√†i',
    cancelButtonText: 'x·ªâu'
  });

  const lowMoney = lowMoneyConfirmed ? "T√†i" : "X·ªâu";

  // Determine final result
  let finalResultType = initialResult.type;

  // Currently, the logic sets finalResultType to initialResult.type regardless of lowBets and lowMoney
  // You can modify this logic if you have specific rules to change finalResultType based on lowBets and lowMoney
  if (lowBets !== lowMoney) {
    // Example logic: If lowBets and lowMoney are different, maintain the initial result
    finalResultType = initialResult.type;
  } else {
    // If both are the same, also maintain the initial result
    finalResultType = initialResult.type;
  }

  // Show final result
  await Swal.fire({
    title: `K·∫øt qu·∫£ cu·ªëi c√πng c·ªßa ${gameName}`,
    html: `
      <strong>K·∫øt qu·∫£ d·ª±a tr√™n x√∫c s·∫Øc:</strong> ${capitalizeFirstLetter(initialResult.type)}<br>
      <strong>B√™n √≠t ng∆∞·ªùi ƒë·∫∑t c∆∞·ª£c:</strong> ${capitalizeFirstLetter(lowBets)}<br>
      <strong>B√™n √≠t ti·ªÅn ƒëang b∆°m:</strong> ${capitalizeFirstLetter(lowMoney)}<br>
      <hr>
      <strong>‚Üí K·∫øt qu·∫£ cu·ªëi c√πng:</strong> ${capitalizeFirstLetter(finalResultType)}
    `,
    icon: 'info',
    confirmButtonText: 'X√°c Nh·∫≠n'
  });

  // Proceed to betting
  await performBetting(gameName, finalResultType, initialResult.percentage, initialResult.betAmount);
}

// Function to perform betting
async function performBetting(gameName, finalResultType, percentage, betAmount) {
  const { isConfirmed } = await Swal.fire({
    title: `K·∫øt qu·∫£ soi c·∫ßu ${gameName}`,
    text: `${capitalizeFirstLetter(finalResultType)} ${percentage}% ${betAmount}k`,
    icon: 'question',
    showCancelButton: true,
    confirmButtonText: 'Li·∫øm',
    cancelButtonText: 'G√£y'
  });

  if (isConfirmed) { // Chose "Li·∫øm"
    capital += betAmount;
    await Swal.fire({
      title: 'Th√†nh c√¥ng!',
      text: `B·∫°n ƒë√£ Li·∫øm v√† c·ªông th√™m ${betAmount}k. V·ªën hi·ªán t·∫°i: ${formatCurrency(capital)}.`,
      icon: 'success',
      confirmButtonText: 'OK'
    });
    await checkCapital();
  } else { // Chose "G√£y"
    capital -= betAmount;
    await Swal.fire({
      title: 'ƒê√£ tr·ª´!',
      text: `B·∫°n ƒë√£ G√£y v√† tr·ª´ ${betAmount}k. V·ªën hi·ªán t·∫°i: ${formatCurrency(capital)}.`,
      icon: 'warning',
      confirmButtonText: 'OK'
    });
    await checkCapital();
  }
}

// Function to check capital
async function checkCapital() {
  if (capital <= 0) {
    capital = 0;
    await Swal.fire({
      title: 'ƒê√£ h·∫øt v·ªën',
      text: 'Nhayy xin l·ªói b·∫°n üòì',
      icon: 'error',
      confirmButtonText: 'Bu·ªìn qua ‚ò∫Ô∏è'
    });
    console.log("ƒê√£ h·∫øt v·ªën.");
  } else {
    await showCapital();
  }
}

// Function to show remaining capital
async function showCapital() {
  const formattedCapital = formatCurrency(capital);
  let message = `B·∫°n c√≤n l·∫°i: ${formattedCapital}`;

  if (capital > 1000) {
    message += "\nNhayy Ch√∫c m·ª´ng b·∫°n ƒë√£ v·ªÅ b·ªù ü•≥";
    const { isConfirmed } = await Swal.fire({
      title: 'S·ªë ti·ªÅn c√≤n l·∫°i',
      text: message,
      icon: 'success',
      showCancelButton: true,
      confirmButtonText: 'D·ª´ng L·∫°i',
      cancelButtonText: 'ƒê·ªçc ti·∫øp'
    });

    if (isConfirmed) {
      await showSuccessMessage();
    } else {
      await getDiceResult(currentGame);
    }
  } else {
    const { isConfirmed } = await Swal.fire({
      title: 'S·ªë ti·ªÅn c√≤n l·∫°i',
      text: message,
      icon: 'info',
      showCancelButton: true,
      confirmButtonText: 'ƒê·ªçc ti·∫øp',
      cancelButtonText: 'Tho√°t'
    });

    if (isConfirmed) {
      await getDiceResult(currentGame);
    } else {
      Swal.fire('Tho√°t ·ª©ng d·ª•ng.', '', 'info');
    }
  }
}

// Function to show success message upon stopping
async function showSuccessMessage() {
  await Swal.fire({
    title: "Xin √≠t l·ªôc Nh√© STK:0348319495 MB!!!",
    text: "üò≥",
    icon: 'success',
    confirmButtonText: 'Ok N√® ‚ú®'
  });
  console.log("R√∫t ti·ªÅn th√†nh c√¥ng.");
}

// Function to format currency
function formatCurrency(amount) {
  if (amount >= 1000000) {
    const million = Math.floor(amount / 1000000);
    const thousand = Math.floor((amount % 1000000) / 1000);
    return `${million}m${thousand > 0 ? thousand + "k" : ''}`;
  }
  return `${Math.floor(amount)}k`;
}

// Function to capitalize first letter
function capitalizeFirstLetter(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}
